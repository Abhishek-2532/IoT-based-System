#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <MQ135.h>
#include <SPI.h>
#include <MFRC522.h>

// Wi-Fi credentials
const char* ssid = "s";          // Replace with your Wi-Fi SSID
const char* password = "16092005";  // Replace with your Wi-Fi password

// MQTT Broker details
const char* mqtt_server = "broker.hivemq.com";  // Public MQTT broker
const char* publishTopic = "esp8266/sensor/data";  // Topic to publish sensor data

float mq135_value; 
float temperature;
float humidity;
float pressure;
float altitude;
//string rfidtag;

// Define the pins used for the sensors
#define MQ135_PIN A0
#define BME280_ADDR 0x76
#define RST_PIN D3  // RST pin for the RFID
#define SS_PIN D4   // SDA pin for the RFID

// Initialize BME280 sensor
Adafruit_BME280 bme;

// Initialize MQ135 sensor
MQ135 mq135_sensor(MQ135_PIN);

// Initialize RFID reader
MFRC522 rfid(SS_PIN, RST_PIN);

WiFiClient espClient;
PubSubClient client(espClient);

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  // Loop until we're connected to WiFi
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  // Loop until we're reconnected to the MQTT broker
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect("ESP8266Client")) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);

  // Initialize BME280
  if (!bme.begin(BME280_ADDR)) {
  Serial.println("Could not find a valid BME280 sensor, check wiring!");
  while (1)
      ;
  }

  // Initialize RFID
  SPI.begin();
  rfid.PCD_Init();
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Example code to read from MQ135
  float mq135_value = mq135_sensor.getPPM();

  // Example code to read from BME280
  float temperature = bme.readTemperature()-1;
  float humidity = bme.readHumidity()+6;
  float pressure = bme.readPressure() / 100.0F;
  float altitude = bme.readAltitude(1013.25)+4;

  // Display sensor values
  Serial.print("Temperature: "); Serial.println(temperature);
  Serial.print("Humidity: "); Serial.println(humidity);
  Serial.print("Pressure: "); Serial.println(pressure);
  Serial.print("Air Quality (PPM): "); Serial.println(mq135_value);
  Serial.print("Altitude: "); Serial.println(altitude);

  // Check for RFID tag
  if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
    rfidTag = "";
     Serial.print("RFID UID: ");
    for (byte i = 0; i < rfid.uid.size; i++) {
      rfidTag += String(rfid.uid.uidByte[i] < 0x10 ? "0" : "");
     rfidTag += String(rfid.uid.uidByte[i], HEX);
       rfidTag += " ";
    }
     rfidTag.trim();
     Serial.println(rfidTag);
     rfid.PICC_HaltA();
   }

  }

  // Create a JSON-like string for publishing
  String sensorData = String("{\"temperature\":") + temperature + ", \"humidity\":" + humidity + ",\"pressure\":" + pressure + ",\"altitude\":" + altitude + ",\"air quality\":" + mq135_value + ",\"rfid\":" + rfidTag + "}";

  // Publish the sensor data to the MQTT topic
  client.publish(publishTopic, sensorData.c_str());

  Serial.print("Published: ");
  Serial.println(sensorData);

  delay(2000); // Delay before the next reading (2 seconds)
}
